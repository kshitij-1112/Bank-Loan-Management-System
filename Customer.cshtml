@model List<BankLoanProject.Models.RepaymentScheduleViewModel>

<link rel="stylesheet" href="~/css/repayment.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1>
        <i class="fas fa-credit-card me-3"></i>
        Loan Repayment Portal
    </h1>
    <p>Manage your loan repayments and check outstanding balances</p>
</div>

<!-- Outstanding Balance Section -->
<div class="balance-section">
    <h3>
        <i class="fas fa-search-dollar me-2"></i>
        Check Outstanding Balance
    </h3>
    
    <form asp-action="GetOutstandingBalance" asp-controller="Repayment" method="get" class="balance-form">
        <div class="form-group">
            <label for="loanId">
                <i class="fas fa-key me-2"></i>
                Loan ID
            </label>
            <input type="number" class="form-control" name="loanId" placeholder="Enter Loan ID" required />
        </div>
        <button type="submit" class="btn btn-balance">
            <i class="fas fa-search me-2"></i>
            Get Balance
        </button>
    </form>

    @if (ViewBag.OutstandingBalance != null)
    {
        <div class="alert alert-info mt-3">
            <i class="fas fa-info-circle me-2"></i>
            <div>
                <strong>Loan ID:</strong> @ViewBag.LoanId<br />
                <strong>Outstanding Balance:</strong> ₹@((decimal)ViewBag.OutstandingBalance).ToString("N2")
            </div>
        </div>
    }
</div>

<!-- Refresh Button -->
<div class="refresh-container">
    <button type="button" class="btn-refresh" onclick="refreshData()">
        <i class="fas fa-sync-alt"></i>
        Refresh
    </button>
</div>

<!-- Table Controls -->
<div class="table-controls">
    <div class="rows-control">
        <label for="rowsPerPage">
            <i class="fas fa-list-ol"></i>
            Rows per page:
        </label>
        <select id="rowsPerPage" class="form-select" onchange="changeRowsPerPage()">
            <option value="5" selected>5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>

    <div class="controls-right">
        <div class="input-group search-input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search repayments..." oninput="searchRepayments()">
        </div>
    </div>
</div>

<!-- Table -->
<div class="table-container">
    <div class="table-wrapper">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col"><i class="fas fa-hashtag me-1"></i>Repayment ID</th>
                    <th scope="col"><i class="fas fa-key me-1"></i>Loan ID</th>
                    <th scope="col"><i class="fas fa-tag me-1"></i>Product Type</th>
                    <th scope="col"><i class="fas fa-box me-1"></i>Product Name</th>
                    <th scope="col"><i class="fas fa-calendar-alt me-1"></i>Due Date</th>
                    <th scope="col"><i class="fas fa-rupee-sign me-1"></i>Amount Due</th>
                    <th scope="col"><i class="fas fa-calendar-check me-1"></i>Payment Date</th>
                    <th scope="col"><i class="fas fa-info-circle me-1"></i>Payment Status</th>
                    <th scope="col"><i class="fas fa-cogs me-1"></i>Action</th>
                </tr>
            </thead>
            <tbody id="table-body">
                @foreach (var item in Model)
                {
                    <tr class="repayment-row" data-repayment-id="@item.RepaymentId">
                        <td><strong>@item.RepaymentId</strong></td>
                        <td><strong>@item.LoanId</strong></td>
                        <td><strong>@item.ProductType</strong></td>
                        <td><strong>@item.ProductName</strong></td>
                        <td><strong>@item.DueDate.ToString("dd-MM-yyyy")</strong></td>
                        <td><span class="amount">₹@item.AmountDue.ToString("N2")</span></td>
                        <td><strong>@(item.PaymentDate?.ToString("dd-MM-yyyy") ?? "-")</strong></td>
                        <td>
                            @{
                                string statusClass = "";
                                string statusIcon = "";
                                switch(item.PaymentStatus?.ToUpper())
                                {
                                    case "PAID":
                                    case "COMPLETED":
                                        statusClass = "status-paid";
                                        statusIcon = "fas fa-check-circle";
                                        break;
                                    case "PENDING":
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                    case "OVERDUE":
                                        statusClass = "status-overdue";
                                        statusIcon = "fas fa-exclamation-triangle";
                                        break;
                                    default:
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                }
                            }
                            <span class="status-badge @statusClass" data-status="@item.PaymentStatus">
                                <i class="@statusIcon me-1"></i>@item.PaymentStatus
                            </span>
                        </td>
                        <td>
                            @if (item.PaymentStatus?.ToUpper() != "PAID" && item.PaymentStatus?.ToUpper() != "COMPLETED")
                            {
                                <button class="btn btn-pay" data-bs-toggle="modal" data-bs-target="#paymentModal"
                                        data-repayment-id="@item.RepaymentId" 
                                        data-loan-id="@item.LoanId"
                                        data-product-type="@item.ProductType"
                                        data-product-name="@item.ProductName"
                                        data-amount="@item.AmountDue"
                                        data-due-date="@item.DueDate.ToString("dd-MM-yyyy")">
                                    <i class="fas fa-credit-card me-1"></i>Pay
                                </button>
                            }
                            else
                            {
                                <span class="text-muted">
                                    <i class="fas fa-check-circle me-1"></i>Paid
                                </span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="paginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Repayment pagination">
            <ul class="pagination" id="paginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>

<!-- Enhanced Payment Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentModalLabel">
                    <i class="fas fa-credit-card me-2"></i>Process Payment
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Payment Details Section -->
                <div class="payment-details">
                    <h6><i class="fas fa-info-circle me-2"></i>Payment Details</h6>
                    <div class="payment-info">
                        <div class="payment-info-item">
                            <span class="payment-info-label">
                                <i class="fas fa-hashtag me-2"></i>Repayment ID:
                            </span>
                            <span class="payment-info-value" id="modalRepaymentId"></span>
                        </div>
                        <div class="payment-info-item">
                            <span class="payment-info-label">
                                <i class="fas fa-key me-2"></i>Loan ID:
                            </span>
                            <span class="payment-info-value" id="modalLoanId"></span>
                        </div>
                        <div class="payment-info-item">
                            <span class="payment-info-label">
                                <i class="fas fa-tag me-2"></i>Product Type:
                            </span>
                            <span class="payment-info-value" id="modalProductType"></span>
                        </div>
                        <div class="payment-info-item">
                            <span class="payment-info-label">
                                <i class="fas fa-box me-2"></i>Product Name:
                            </span>
                            <span class="payment-info-value" id="modalProductName"></span>
                        </div>
                        <div class="payment-info-item">
                            <span class="payment-info-label">
                                <i class="fas fa-calendar-alt me-2"></i>Due Date:
                            </span>
                            <span class="payment-info-value" id="modalDueDate"></span>
                        </div>
                        <div class="payment-info-item">
                            <span class="payment-info-label">
                                <i class="fas fa-rupee-sign me-2"></i>Amount Due:
                            </span>
                            <span class="payment-info-value amount" id="modalAmount"></span>
                        </div>
                    </div>
                </div>

                <!-- Payment Form -->
                <form id="paymentForm" method="post" asp-action="Pay" asp-controller="Repayment">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="repaymentId" id="repaymentId" />
                    
                    <div class="form-group">
                        <label for="paymentMethod">
                            <i class="fas fa-credit-card me-2"></i>Payment Method
                        </label>
                        <select id="paymentMethod" name="paymentMethod" class="form-select" required>
                            <option value="">-- Select Payment Method --</option>
                            <option value="UPI">UPI</option>
                            <option value="NetBanking">Net Banking</option>
                            <option value="Card">Credit/Debit Card</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="btn btn-confirm">
                        <i class="fas fa-check-circle me-2"></i>Confirm Payment
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variables for pagination and search
    let currentPage = 1;
    let rowsPerPage = 5;
    let allRows = [];
    let filteredRows = [];
    let currentRepaymentId = null;

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        initializeTable();
        initializeModal();
        initializeFormHandlers();
    });

    function initializeTable() {
        allRows = Array.from(document.querySelectorAll('.repayment-row'));
        filteredRows = [...allRows];
        updateTable();
    }

    function initializeModal() {
        const paymentModal = document.getElementById('paymentModal');
        paymentModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            
            // Get data from button attributes
            currentRepaymentId = button.getAttribute('data-repayment-id');
            const loanId = button.getAttribute('data-loan-id');
            const productType = button.getAttribute('data-product-type');
            const productName = button.getAttribute('data-product-name');
            const amount = button.getAttribute('data-amount');
            const dueDate = button.getAttribute('data-due-date');
            
            // Populate modal with data
            document.getElementById('repaymentId').value = currentRepaymentId;
            document.getElementById('modalRepaymentId').textContent = currentRepaymentId;
            document.getElementById('modalLoanId').textContent = loanId;
            document.getElementById('modalProductType').textContent = productType;
            document.getElementById('modalProductName').textContent = productName;
            document.getElementById('modalDueDate').textContent = dueDate;
            document.getElementById('modalAmount').textContent = '₹' + parseFloat(amount).toLocaleString('en-IN', {minimumFractionDigits: 2});
        });
    }

    function initializeFormHandlers() {
        // Payment form submission
        document.getElementById('paymentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const submitBtn = this.querySelector('.btn-confirm');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
            submitBtn.disabled = true;
            
            // Simulate payment processing
            setTimeout(() => {
                // Update the status in the table
                updatePaymentStatusInTable(currentRepaymentId, 'COMPLETED');
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('paymentModal'));
                modal.hide();
                
                // Show success message
                showSuccessMessage('Payment processed successfully!');
                
                // Reset button
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                
                // Reset form
                this.reset();
            }, 2000);
        });
    }

    function updatePaymentStatusInTable(repaymentId, newStatus) {
        const row = document.querySelector(`[data-repayment-id="${repaymentId}"]`);
        if (row) {
            // Update status badge
            const statusCell = row.querySelector('.status-badge');
            if (statusCell) {
                statusCell.classList.remove('status-pending', 'status-overdue', 'status-paid', 'status-completed');
                statusCell.classList.add('status-completed');
                statusCell.innerHTML = '<i class="fas fa-check-circle me-1"></i>COMPLETED';
                statusCell.setAttribute('data-status', newStatus);
            }
            
            // Update action cell
            const actionCell = row.querySelector('td:last-child');
            if (actionCell) {
                actionCell.innerHTML = '<span class="text-muted"><i class="fas fa-check-circle me-1"></i>Paid</span>';
            }
            
            // Update payment date (current date)
            const paymentDateCell = row.querySelector('td:nth-child(7)');
            if (paymentDateCell) {
                const today = new Date().toLocaleDateString('en-GB');
                paymentDateCell.innerHTML = `<strong>${today}</strong>`;
            }
        }
    }

    function showSuccessMessage(message) {
        // Create and show success alert
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success';
        alertDiv.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
        
        // Insert after dashboard header
        const header = document.querySelector('.dashboard-header');
        header.parentNode.insertBefore(alertDiv, header.nextSibling);
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }

    function applyFilters() {
        let rows = [...allRows];
        
        // Apply search filter
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        if (searchTerm !== '') {
            rows = rows.filter(row => {
                const text = row.textContent.toLowerCase();
                return text.includes(searchTerm);
            });
        }
        
        filteredRows = rows;
    }

    function updateTable() {
        // Hide all rows first
        allRows.forEach(row => row.style.display = 'none');
        
        // Calculate pagination
        const totalRows = filteredRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = Math.min(startIndex + rowsPerPage, totalRows);
        
        // Show current page rows
        for (let i = startIndex; i < endIndex; i++) {
            if (filteredRows[i]) {
                filteredRows[i].style.display = '';
            }
        }
        
        // Update pagination controls
        updatePagination(totalPages, totalRows, startIndex, endIndex);
    }

    function updatePagination(totalPages, totalRows, startIndex, endIndex) {
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationInfo = document.getElementById('paginationInfo');
        
        // Clear existing pagination
        paginationContainer.innerHTML = '';
        
        if (totalPages <= 1) {
            const singleBtn = createBootstrapPaginationButton('1', 1, false, true);
            paginationContainer.appendChild(singleBtn);
        } else {
            // First page button
            const firstBtn = createBootstrapPaginationButton('«', 1, currentPage === 1);
            paginationContainer.appendChild(firstBtn);
            
            // Previous page button
            const prevBtn = createBootstrapPaginationButton('‹', currentPage - 1, currentPage === 1);
            paginationContainer.appendChild(prevBtn);
            
            // Page number buttons
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const pageBtn = createBootstrapPaginationButton(i, i, false, i === currentPage);
                paginationContainer.appendChild(pageBtn);
            }
            
            // Next page button
            const nextBtn = createBootstrapPaginationButton('›', currentPage + 1, currentPage === totalPages);
            paginationContainer.appendChild(nextBtn);
            
            // Last page button
            const lastBtn = createBootstrapPaginationButton('»', totalPages, currentPage === totalPages);
            paginationContainer.appendChild(lastBtn);
        }
        
        // Update pagination info
        if (totalRows > 0) {
            paginationInfo.innerHTML = `
                <i class="fas fa-info-circle"></i>
                Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
            `;
        } else {
            paginationInfo.innerHTML = `
                <i class="fas fa-info-circle"></i>
                No matching records found
            `;
        }
    }

    function createBootstrapPaginationButton(text, page, disabled, active = false) {
        const li = document.createElement('li');
        li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;
        
        const button = document.createElement('a');
        button.className = 'page-link';
        button.innerHTML = text;
        button.href = '#';
        
        if (!disabled) {
            button.onclick = (e) => {
                e.preventDefault();
                goToPage(page);
            };
        }
        
        li.appendChild(button);
        return li;
    }

    function goToPage(page) {
        currentPage = page;
        updateTable();
    }

    function changeRowsPerPage() {
        rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
        currentPage = 1;
        updateTable();
    }

    function searchRepayments() {
        currentPage = 1;
        applyFilters();
        updateTable();
    }

    function refreshData() {
        const refreshBtn = document.querySelector('.btn-refresh i');
        refreshBtn.classList.add('fa-spin');
        
        // Clear search
        document.getElementById('searchInput').value = '';
        
        // Reset to original data
        currentPage = 1;
        applyFilters();
        
        setTimeout(() => {
            updateTable();
            refreshBtn.classList.remove('fa-spin');
        }, 800);
    }
</script>
