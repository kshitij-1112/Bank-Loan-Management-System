@model IEnumerable<CustomerManagement.Models.Entities.Customer>
<link rel="stylesheet" href="~/css/admin-dashboard.css" />

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1>Customer Management Dashboard</h1>
    <p>Manage customer registrations and KYC verification</p>
</div>

<!-- Refresh Button -->
<div class="refresh-container">
    <button type="button" class="btn-refresh" onclick="refreshData()">
        <i class="fas fa-sync-alt"></i>
        Refresh
    </button>
</div>

<!-- Table Controls -->
<div class="table-controls">
    <div class="rows-control">
        <label for="rowsPerPage">
            <i class="fas fa-list-ol"></i>
            Rows per page:
        </label>
        <select id="rowsPerPage" onchange="changeRowsPerPage()">
            <option value="2" selected>2</option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>
    <div class="search-control">
        <input type="text" id="searchInput" placeholder="Search customers..." oninput="searchCustomers()">
    </div>
</div>

<!-- Table Container -->
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th><i class="fas fa-id-badge"></i> Customer ID</th>
                <th><i class="fas fa-user"></i> Name</th>
                <th><i class="fas fa-envelope"></i> Email</th>
                <th><i class="fas fa-map-marker-alt"></i> Address</th>
                <th><i class="fas fa-file-pdf"></i> Documents</th>
                <th><i class="fas fa-check-circle"></i> KYC Status</th>
                <th class="actions-column"><i class="fas fa-cogs"></i> Actions</th>
            </tr>
        </thead>
        <tbody id="customerTableBody">
            @foreach (var customer in Model)
            {
                <tr class="customer-row" data-customer-id="@customer.Id" data-original-id="@customer.Id">
                    <td><span class="customer-id">#@customer.Id</span></td>
                    <td><strong>@customer.FullName</strong></td>
                    <td>@customer.Email</td>
                    <td>@customer.Address</td>
                    <td>
                        <a href="@customer.DocumentPath" target="_blank" class="document-link">
                            documents/@(customer.FullName.ToLower().Replace(" ", "_"))_kyc.pdf
                        </a>
                    </td>
                    <td>
                        @if (customer.KycStatus == "Approved" || customer.KycStatus == "Verified")
                        {
                            <span class="status-badge status-verified">
                                <i class="fas fa-check-circle"></i> @customer.KycStatus
                            </span>
                        }
                        else
                        {
                            <span class="status-badge status-pending">
                                <i class="fas fa-clock"></i> @customer.KycStatus
                            </span>
                        }
                    </td>
                    <td class="actions-cell">
                        <div class="action-buttons">
                            <button class="btn-action btn-edit" onclick="openEditModal(@customer.Id)">
                                <i class="fas fa-edit"></i>
                                <span>Edit</span>
                            </button>
                            <form asp-action="Delete" method="post" style="display:inline;" onsubmit="handleFormSubmit(event)">
                                <input type="hidden" name="id" value="@customer.Id" />
                                <button type="submit" class="btn-action btn-delete" 
                                        onclick="return confirm('Are you sure you want to delete this customer?');">
                                    <i class="fas fa-trash-alt"></i>
                                    <span>Delete</span>
                                </button>
                            </form>
                            <form asp-action="Verify" method="post" style="display:inline;" onsubmit="handleFormSubmit(event)">
                                <input type="hidden" name="id" value="@customer.Id" />
                                <button type="submit" class="btn-action btn-verify">
                                    <i class="fas fa-user-check"></i>
                                    <span>Verify</span>
                                </button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationContainer">
        <!-- Pagination buttons will be generated by JavaScript -->
    </div>

    <!-- Pagination Info -->
    <div class="pagination-info" id="paginationInfo">
        <!-- Pagination info will be generated by JavaScript -->
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">
                    <i class="fas fa-edit"></i> Edit Customer
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="editModalBody">
                <!-- Form will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables for pagination and search
        let currentPage = 1;
        let rowsPerPage = 2; // Changed default to 2
        let allRows = [];
        let filteredRows = [];
        let currentScrollPosition = 0;

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeTable();
        });

        function initializeTable() {
            allRows = Array.from(document.querySelectorAll('.customer-row'));
            filteredRows = [...allRows];
            updateTable();
        }

        function updateTable() {
            // Save current scroll position
            currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;
            
            // Hide all rows first
            allRows.forEach(row => row.style.display = 'none');

            // Calculate pagination
            const totalRows = filteredRows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

            // Show current page rows
            for (let i = startIndex; i < endIndex; i++) {
                if (filteredRows[i]) {
                    filteredRows[i].style.display = '';
                }
            }

            // Update pagination controls
            updatePagination(totalPages, totalRows, startIndex, endIndex);
            
            // Restore scroll position
            setTimeout(() => {
                window.scrollTo(0, currentScrollPosition);
            }, 10);
        }

        function updatePagination(totalPages, totalRows, startIndex, endIndex) {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');

            // Clear existing pagination
            paginationContainer.innerHTML = '';

            // Always show pagination container for consistent layout
            paginationContainer.style.display = 'flex';

            if (totalPages <= 1) {
                // Show single page button when only one page
                const singleBtn = createPaginationButton('1', 1, false, true);
                paginationContainer.appendChild(singleBtn);
            } else {
                // First page button
                const firstBtn = createPaginationButton('<<', 1, currentPage === 1);
                paginationContainer.appendChild(firstBtn);

                // Previous page button
                const prevBtn = createPaginationButton('<', currentPage - 1, currentPage === 1);
                paginationContainer.appendChild(prevBtn);

                // Page number buttons
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    const pageBtn = createPaginationButton(i, i, false, i === currentPage);
                    paginationContainer.appendChild(pageBtn);
                }

                // Next page button
                const nextBtn = createPaginationButton('>', currentPage + 1, currentPage === totalPages);
                paginationContainer.appendChild(nextBtn);

                // Last page button
                const lastBtn = createPaginationButton('>>', totalPages, currentPage === totalPages);
                paginationContainer.appendChild(lastBtn);
            }

            // Update pagination info
            if (totalRows > 0) {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
                `;
            } else {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    No matching records found
                `;
            }
        }

        function createPaginationButton(text, page, disabled, active = false) {
            const button = document.createElement('button');
            button.className = `pagination-btn ${active ? 'active' : ''}`;
            button.textContent = text;
            button.disabled = disabled;
            
            if (!disabled) {
                button.onclick = () => goToPage(page);
            }
            
            return button;
        }

        function goToPage(page) {
            currentPage = page;
            updateTable();
        }

        function changeRowsPerPage() {
            rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
            currentPage = 1;
            updateTable();
        }

        function searchCustomers() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            if (searchTerm === '') {
                filteredRows = [...allRows];
            } else {
                filteredRows = allRows.filter(row => {
                    const text = row.textContent.toLowerCase();
                    return text.includes(searchTerm);
                });
            }
            
            currentPage = 1;
            updateTable();
        }

        function refreshData() {
            const refreshBtn = document.querySelector('.btn-refresh i');
            refreshBtn.classList.add('fa-spin');

            // Clear search
            document.getElementById('searchInput').value = '';

            // Reset to original data
            filteredRows = [...allRows];
            currentPage = 1;

            setTimeout(() => {
                updateTable();
                refreshBtn.classList.remove('fa-spin');
            }, 800);
        }

        function openEditModal(id) {
            $.get('/Admin/Edit/' + id, function (data) {
                $('#editModalBody').html(data);
                $('#editModal').modal('show');
            });
        }

        // Handle form submissions to prevent page scroll
        function handleFormSubmit(event) {
            // Save current scroll position before form submission
            currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;
            
            // Let the form submit normally, but we'll restore position after page reload
            sessionStorage.setItem('scrollPosition', currentScrollPosition);
            sessionStorage.setItem('currentPage', currentPage);
            sessionStorage.setItem('rowsPerPage', rowsPerPage);
        }

        // Restore state after page reload
        window.addEventListener('load', function() {
            const savedScrollPosition = sessionStorage.getItem('scrollPosition');
            const savedCurrentPage = sessionStorage.getItem('currentPage');
            const savedRowsPerPage = sessionStorage.getItem('rowsPerPage');
            
            if (savedRowsPerPage) {
                rowsPerPage = parseInt(savedRowsPerPage);
                document.getElementById('rowsPerPage').value = rowsPerPage;
            }
            
            if (savedCurrentPage) {
                currentPage = parseInt(savedCurrentPage);
            }
            
            if (savedScrollPosition) {
                setTimeout(() => {
                    window.scrollTo(0, parseInt(savedScrollPosition));
                    // Clear saved positions
                    sessionStorage.removeItem('scrollPosition');
                    sessionStorage.removeItem('currentPage');
                    sessionStorage.removeItem('rowsPerPage');
                }, 100);
            }
        });
    </script>
}
